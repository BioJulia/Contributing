{
    "docs": [
        {
            "location": "/", 
            "text": "Contributing\n\n\n\n\nWelcome!\n\n\nThis documentation lays out the guidelines and some tutorials for Biologists, Bioinformaticians, and Computational Biologists, who want to contribute to the BioJulia community.\n\n\nBioJulia welcomes contributions in several forms including through Github Pull Requests, through opening Github Issues, and through package submissions. BioJulia welcomes contributions of all kinds to the community, this includes but is not limited to code contributions.\n\n\nPlease find a summary list of common ways you can get involved below. You will find more detailed guidelines for each of these by following the links in the documentation menu on the left.\n\n\n\n\nOur community code of conduct\n\n\nWe have a policy of being as open and inclusive as possible at all times, and we are always happy for people to contribute and join in the community. We welcome (and strive to be inclusive of) all people, of all backgrounds. To help us all achieve this we have a code of conduct that all members and visitors are expected to follow, please read this.\n\n\n\n\nHow to get involved\n\n\n\n\nContribute a package to BioJulia.\n\n\nJoin the BioJulia GitHub organisation.\n\n\nFile an issue reporting a bug, offering suggestions, or leaving feedback.\n\n\nContribute to existing BioJulia packages.\n\n\nCome and talk to us! :)\n\n\n\n\nWe use Gitter for our chat rooms. Each one is listed below with a link. Use these to ask your questions!\n\n\n\n\n\n\n\n\nRoom\n\n\nLink\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBio.jl\n\n\n\n\nFor discussion about the Bio.jl package.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#contributing", 
            "text": "", 
            "title": "Contributing"
        }, 
        {
            "location": "/#welcome", 
            "text": "This documentation lays out the guidelines and some tutorials for Biologists, Bioinformaticians, and Computational Biologists, who want to contribute to the BioJulia community.  BioJulia welcomes contributions in several forms including through Github Pull Requests, through opening Github Issues, and through package submissions. BioJulia welcomes contributions of all kinds to the community, this includes but is not limited to code contributions.  Please find a summary list of common ways you can get involved below. You will find more detailed guidelines for each of these by following the links in the documentation menu on the left.", 
            "title": "Welcome!"
        }, 
        {
            "location": "/#our-community-code-of-conduct", 
            "text": "We have a policy of being as open and inclusive as possible at all times, and we are always happy for people to contribute and join in the community. We welcome (and strive to be inclusive of) all people, of all backgrounds. To help us all achieve this we have a code of conduct that all members and visitors are expected to follow, please read this.", 
            "title": "Our community code of conduct"
        }, 
        {
            "location": "/#how-to-get-involved", 
            "text": "Contribute a package to BioJulia.  Join the BioJulia GitHub organisation.  File an issue reporting a bug, offering suggestions, or leaving feedback.  Contribute to existing BioJulia packages.  Come and talk to us! :)   We use Gitter for our chat rooms. Each one is listed below with a link. Use these to ask your questions!     Room  Link  Description      Bio.jl   For discussion about the Bio.jl package.", 
            "title": "How to get involved"
        }, 
        {
            "location": "/package_submission/", 
            "text": "Submitting a package to BioJulia", 
            "title": "Submitting a Package"
        }, 
        {
            "location": "/package_submission/#submitting-a-package-to-biojulia", 
            "text": "", 
            "title": "Submitting a package to BioJulia"
        }, 
        {
            "location": "/pull_requests/", 
            "text": "Contribute by pull requests\n\n\nConributions of code and documentation to existing BioJulia repositories take the form of pull requests. \n\n\nBefore you start to work on your fix or addition to a BioJulia repository we recommend that you make your pull request early. This allows better collaboration with others, exchange of ideas, more code contributions from others (taking the pressure off you!), and better overall code as a result.\n\n\n\n\nThe BioJulia Pull Request lifecycle\n\n\nPull Requests on BioJulia repositories go through several stages, and these stages are indicated by the following labels. Please use these labels to help let others know how far your are along with your work.\n\n\n\n\nstage: planing\n:   You're planning. Figuring out the best way to code something or discussing ideas.\n\n\nstage: WIP\n:   You're coding or writing, actively working on it. \n\n\nstage: RTR\n:   You're finished, and want others to review the work and see if it is ready to be accepted and merged into BioJulia.\n\n\n\n\n\n\nThe BioJulia Pull Request review\n\n\nOnce the pull request enters the RTR (ready to review) stage, other members of the BioJulia organisation, will review the code and documentation in the pull request, and will assess it according to the \nBioJulia code and package guidelines\n.\n\n\nYour pull request will be accepted and merged if:\n\n\n\n\nTwo reviewers subsequently recommend the pull request for merging.\n\n\nThe automated build system confirms that all unit tests pass without failiure.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/pull_requests/#contribute-by-pull-requests", 
            "text": "Conributions of code and documentation to existing BioJulia repositories take the form of pull requests.   Before you start to work on your fix or addition to a BioJulia repository we recommend that you make your pull request early. This allows better collaboration with others, exchange of ideas, more code contributions from others (taking the pressure off you!), and better overall code as a result.", 
            "title": "Contribute by pull requests"
        }, 
        {
            "location": "/pull_requests/#the-biojulia-pull-request-lifecycle", 
            "text": "Pull Requests on BioJulia repositories go through several stages, and these stages are indicated by the following labels. Please use these labels to help let others know how far your are along with your work.   stage: planing :   You're planning. Figuring out the best way to code something or discussing ideas.  stage: WIP :   You're coding or writing, actively working on it.   stage: RTR :   You're finished, and want others to review the work and see if it is ready to be accepted and merged into BioJulia.", 
            "title": "The BioJulia Pull Request lifecycle"
        }, 
        {
            "location": "/pull_requests/#the-biojulia-pull-request-review", 
            "text": "Once the pull request enters the RTR (ready to review) stage, other members of the BioJulia organisation, will review the code and documentation in the pull request, and will assess it according to the  BioJulia code and package guidelines .  Your pull request will be accepted and merged if:   Two reviewers subsequently recommend the pull request for merging.  The automated build system confirms that all unit tests pass without failiure.", 
            "title": "The BioJulia Pull Request review"
        }, 
        {
            "location": "/code_style/", 
            "text": "BioJulia package and code guidelines\n\n\n\n\nRequirements for BioJulia packages\n\n\nWe enforce the following requirements in our packages.\n\n\n\n\n\n\nTypes and functions must be documented using Julia's \ndocstrings\n.    Documentation regarding specific implementation details that aren't relevant    to users should be in the form of comments.        Documentation may be omitted if the function is not exported    (i.e. only used internally) and is short and obvious. E.g. \ncube(x) = x^3\n.        However, please consider that what may be obvious to you as the write of the    code, may not be obvious to others. Therefore, we do recommend documenting     as much as possible, to help out fellow julia coders and biologists    when they are reading and understanding the code. We are trying to    make BioJulia packages as easy as possible to use, understand, and code    on for everyone :)\n\n\n\n\n\n\nIn addition to documenting code in the source files through docstrings,    we encourage contributers to create documentation which is more akin to    a manual, complete with comprehensive explanations and examples of how     to use the package.        We use Documenter.jl and mkdocs, to generate such documentation    and host it on the web.    The source markdown files for such manuals are kept in the \ndocs/src/man\n    folder of each BioJulia package/repository.    \n\n\n\n\nAll significant code must be tested.    Tests should be organized into contexts, and into separate files based on     module.    Files for tests for a module go into an appropriately named    folder, within the \ntest\n folder in the Bio.jl git repo. E.g. tests    for the Seq module of Bio.jl go in the \ntest/seq\n folder of the Bio.jl     package.    \n\n\nAll code contributed should be compatible with the latest stable version of     Julia.\n\n\n\n\n\n\nStyle requirements for code\n\n\n\n\n\n\nIndent with 4 spaces.\n\n\n\n\n\n\nType names are camel case, with the first letter capitalized. E.g. \nSomeVeryUsefulType\n.\n\n\n\n\n\n\nModule names are also camel case.\n\n\n\n\n\n\nFunction names, apart from constructors, are all lowercase.   Include underscores between words only if the name would be hard    to read without.   E.g.  \nstart\n, \nstop\n, \nfindletter\n \nfind_last_digit\n.\n\n\n\n\n\n\nGenerally try to keep lines below 80-columns, unless splitting a long line   onto multiple lines makes it harder to read.\n\n\n\n\n\n\nFiles that declare modules should only declare the module, and import any   modules that it requires. Any code should be included from separate files.   E.g.\n\n\n\n\n\n\nmodule\n \nAwesomeFeatures\n\n\n\nusing\n \nIntervalsTrees\n,\n \nJSON\n\n\n\ninclude\n(\nfeature1.jl\n)\n\n\ninclude\n(\nfeature2.jl\n)\n\n\n\nend\n\n\n\n\n\n\n\n\n\n\nFiles that declare modules should have the same name name of the module.   E.g the module \nSomeModule\n is declared under the file \nSomeModule.jl\n.\n\n\n\n\n\n\nSeparate logical blocks of code with one blank line,   or two blank lines for function/type definitions.\n\n\n\n\n\n\nWhen extending method definitions, define the methods with a module name prefix. E.g.\n\n\n\n\n\n\nfunction\n Base\n.\nstart\n(\niter\n::\nYourType\n)\n\n  \n...\n\n\nend\n\n\n\nBase\n.\ndone\n(\niter\n::\nYourType\n,\n \nstate\n)\n \n=\n \n...\n\n \n``\n`\n\n\n\n*\n \nDocument\n \nfunctions\n \nusing\n \nbare\n \ndocstrings\n \nbefore\n \na\n \ndefinition\n:\n\n\n\n\n\n\njulia \"This function foo's something\" foo(x) = 2*x\n\n\n* Functions that get or set variables in a type should not be\n  prefixed with \nget\n or \nset\n.\n  The getter should be named for the variable it sets, and the setter\n  should have the same name as the getter, with the suffix `!`.\n  For exmaple, for the variable `names`:\n\n\n\n\n\njulia name(node) # get node name name!(node, \"somename\") # set node name ```", 
            "title": "The BioJulia Code and Package Guidelines"
        }, 
        {
            "location": "/code_style/#biojulia-package-and-code-guidelines", 
            "text": "", 
            "title": "BioJulia package and code guidelines"
        }, 
        {
            "location": "/code_style/#requirements-for-biojulia-packages", 
            "text": "We enforce the following requirements in our packages.    Types and functions must be documented using Julia's  docstrings .    Documentation regarding specific implementation details that aren't relevant    to users should be in the form of comments.        Documentation may be omitted if the function is not exported    (i.e. only used internally) and is short and obvious. E.g.  cube(x) = x^3 .        However, please consider that what may be obvious to you as the write of the    code, may not be obvious to others. Therefore, we do recommend documenting     as much as possible, to help out fellow julia coders and biologists    when they are reading and understanding the code. We are trying to    make BioJulia packages as easy as possible to use, understand, and code    on for everyone :)    In addition to documenting code in the source files through docstrings,    we encourage contributers to create documentation which is more akin to    a manual, complete with comprehensive explanations and examples of how     to use the package.        We use Documenter.jl and mkdocs, to generate such documentation    and host it on the web.    The source markdown files for such manuals are kept in the  docs/src/man     folder of each BioJulia package/repository.       All significant code must be tested.    Tests should be organized into contexts, and into separate files based on     module.    Files for tests for a module go into an appropriately named    folder, within the  test  folder in the Bio.jl git repo. E.g. tests    for the Seq module of Bio.jl go in the  test/seq  folder of the Bio.jl     package.      All code contributed should be compatible with the latest stable version of     Julia.", 
            "title": "Requirements for BioJulia packages"
        }, 
        {
            "location": "/code_style/#style-requirements-for-code", 
            "text": "Indent with 4 spaces.    Type names are camel case, with the first letter capitalized. E.g.  SomeVeryUsefulType .    Module names are also camel case.    Function names, apart from constructors, are all lowercase.   Include underscores between words only if the name would be hard    to read without.   E.g.   start ,  stop ,  findletter   find_last_digit .    Generally try to keep lines below 80-columns, unless splitting a long line   onto multiple lines makes it harder to read.    Files that declare modules should only declare the module, and import any   modules that it requires. Any code should be included from separate files.   E.g.    module   AwesomeFeatures  using   IntervalsTrees ,   JSON  include ( feature1.jl )  include ( feature2.jl )  end     Files that declare modules should have the same name name of the module.   E.g the module  SomeModule  is declared under the file  SomeModule.jl .    Separate logical blocks of code with one blank line,   or two blank lines for function/type definitions.    When extending method definitions, define the methods with a module name prefix. E.g.    function  Base . start ( iter :: YourType ) \n   ...  end  Base . done ( iter :: YourType ,   state )   =   ... \n  `` `  *   Document   functions   using   bare   docstrings   before   a   definition :   julia \"This function foo's something\" foo(x) = 2*x  * Functions that get or set variables in a type should not be\n  prefixed with  get  or  set .\n  The getter should be named for the variable it sets, and the setter\n  should have the same name as the getter, with the suffix `!`.\n  For exmaple, for the variable `names`:  julia name(node) # get node name name!(node, \"somename\") # set node name ```", 
            "title": "Style requirements for code"
        }, 
        {
            "location": "/join_biojulia/", 
            "text": "Joining the BioJulia GitHub Organisation\n\n\nIf you would like to be added to the BioJulia GitHub organisation, you may ask the current owners to add you.\n\n\nThey will generally be willing to do so if you have done one or more of the following:\n\n\n\n\nYou have registered a new package under BioJulia.\n\n\nA fix of a bug.\n\n\nPerformance improvements of existing code.\n\n\nNew code and additional functionality.\n\n\nAdditional and improved unit tests of existing code.\n\n\nAdditional or improved documentation of existing code and packages.\n\n\n\n\nNone of these \"requirements\" are set in stone, but we prefer you to have done one or more of the above, as it  gives good confidence that you are familiar with the process of filing-bugs/surfacing-issues/providing-documentation/reviewing-pull-requests, and are willing to do so. Any other avenue for demonstrating commitment to the community and the GitHub organisation will be considered.", 
            "title": "Join the BioJulia GitHub organisation"
        }, 
        {
            "location": "/join_biojulia/#joining-the-biojulia-github-organisation", 
            "text": "If you would like to be added to the BioJulia GitHub organisation, you may ask the current owners to add you.  They will generally be willing to do so if you have done one or more of the following:   You have registered a new package under BioJulia.  A fix of a bug.  Performance improvements of existing code.  New code and additional functionality.  Additional and improved unit tests of existing code.  Additional or improved documentation of existing code and packages.   None of these \"requirements\" are set in stone, but we prefer you to have done one or more of the above, as it  gives good confidence that you are familiar with the process of filing-bugs/surfacing-issues/providing-documentation/reviewing-pull-requests, and are willing to do so. Any other avenue for demonstrating commitment to the community and the GitHub organisation will be considered.", 
            "title": "Joining the BioJulia GitHub Organisation"
        }
    ]
}